{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d1ad0f02",
   "metadata": {},
   "source": [
    "### Build Your Own Sentiment Analysis Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "358a67c1",
   "metadata": {},
   "source": [
    "1- Get the stemmed data using the same process you did in Week 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fcbf34b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5814_8</td>\n",
       "      <td>1</td>\n",
       "      <td>With all this stuff going down at the moment w...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2381_9</td>\n",
       "      <td>1</td>\n",
       "      <td>\\The Classic War of the Worlds\\\" by Timothy Hi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7759_3</td>\n",
       "      <td>0</td>\n",
       "      <td>The film starts with a manager (Nicholas Bell)...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3630_4</td>\n",
       "      <td>0</td>\n",
       "      <td>It must be assumed that those who praised this...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9495_8</td>\n",
       "      <td>1</td>\n",
       "      <td>Superbly trashy and wondrously unpretentious 8...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  sentiment                                             review\n",
       "0  5814_8          1  With all this stuff going down at the moment w...\n",
       "1  2381_9          1  \\The Classic War of the Worlds\\\" by Timothy Hi...\n",
       "2  7759_3          0  The film starts with a manager (Nicholas Bell)...\n",
       "3  3630_4          0  It must be assumed that those who praised this...\n",
       "4  9495_8          1  Superbly trashy and wondrously unpretentious 8..."
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Starting by importing the data\n",
    "popData = pd.read_csv('labeledTrainData.tsv', sep='\\t')\n",
    "\n",
    "# Checking that the data is good\n",
    "popData.head(5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6908d9f",
   "metadata": {},
   "source": [
    "2- Split this into a training and test set. <br>\n",
    "3- Fit and apply the tf-idf vectorization to the training set. <br>\n",
    "4- Apply but DO NOT FIT the tf-idf vectorization to the test set (Why?).<br>\n",
    "&nbsp; I think this is because some of the train data may spoil the test data and cause the test data to reflect a false positive result for optimization. <br>\n",
    "5- Train a logistic regression using the training data. <br>\n",
    "6- Find the model accuracy on test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fdf3ed89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8802\n"
     ]
    }
   ],
   "source": [
    "# Doing some preprocessin for steps 3 - 5\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Load the data into a DataFrame\n",
    "popData = pd.read_csv('labeledTrainData.tsv', sep='\\t')\n",
    "popData = popData[['sentiment', 'review']]\n",
    "\n",
    "# Convert the \"review\" column to lowercase\n",
    "popData['review'] = popData['review'].str.lower()\n",
    "\n",
    "# Remove punctuation and special characters from the \"review\" column\n",
    "popData['review'] = popData['review'].apply(lambda x: re.sub(r'[^\\w\\s]', '', x))\n",
    "\n",
    "# Remove stop words from the \"review\" column\n",
    "stop_words = stopwords.words('english')\n",
    "popData['review'] = popData['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n",
    "\n",
    "# Appling the PorterStemmer to the \"review\" column\n",
    "porter = PorterStemmer()\n",
    "popData['review'] = popData['review'].apply(lambda x: ' '.join([porter.stem(word) for word in x.split()]))\n",
    "\n",
    "# Spliting the data into training and test sets\n",
    "train_size = int(len(popData) * 0.8)\n",
    "train_data = popData[:train_size]\n",
    "test_data = popData[train_size:]\n",
    "\n",
    "# Fit and apply the tf-idf vectorization to the training set\n",
    "tfidf_vectorizer = TfidfVectorizer()\n",
    "X_train_tfidf = tfidf_vectorizer.fit_transform(train_data['review'].tolist())\n",
    "\n",
    "# Apply but don't fit the tf-idf vectorization to the test set\n",
    "X_test_tfidf = tfidf_vectorizer.transform(test_data['review'].tolist())\n",
    "\n",
    "# Extract the labels for the training and test sets\n",
    "y_train = np.array(train_data['sentiment'])\n",
    "y_test = np.array(test_data['sentiment'])\n",
    "\n",
    "# Train the logistic regression model on the training set\n",
    "lr_model = LogisticRegression(max_iter=1000)\n",
    "lr_model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred = lr_model.predict(X_test_tfidf)\n",
    "\n",
    "# Calculate the accuracy of the model\n",
    "accuracy = np.mean(y_pred == y_test)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5945006e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>stuff go moment mj ive start listen music watc...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>classic war world timothi hine entertain film ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>film start manag nichola bell give welcom inve...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>must assum prais film greatest film opera ever...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>superbl trashi wondrous unpretenti 80 exploit ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sentiment                                             review\n",
       "0          1  stuff go moment mj ive start listen music watc...\n",
       "1          1  classic war world timothi hine entertain film ...\n",
       "2          0  film start manag nichola bell give welcom inve...\n",
       "3          0  must assum prais film greatest film opera ever...\n",
       "4          1  superbl trashi wondrous unpretenti 80 exploit ..."
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking on the cleaned up data to make sure the data frame is intact. \n",
    "popData.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67e0a6ed",
   "metadata": {},
   "source": [
    "7- Create a confusion matrix for the test set predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c31ec9a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2150,  322],\n",
       "       [ 277, 2251]], dtype=int64)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "y_pred = lr_model.predict(X_test_tfidf)\n",
    "confusion_matrix(y_test, y_pred)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a98f0c52",
   "metadata": {},
   "source": [
    "8- Create a ROC curve for the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4778f70e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "# Predicted probabilities for the test set\n",
    "y_pred_proba = lr_model.predict_proba(X_test_tfidf)[:, 1]\n",
    "\n",
    "# Compute ROC curve and AUC\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# Plot the ROC curve\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "lw = 2\n",
    "plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC)')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dba7739",
   "metadata": {},
   "source": [
    "10- Pick another classification model you learned about this week and repeat steps (5) – (9). </br>\n",
    "&nbsp;&nbsp;&nbsp; Because I am an Netflix dork, I am going to use movie review data for this.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "906d0d78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>With No Dead Heroes you get stupid lines like ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>I thought maybe... maybe this could be good. A...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>An elite American military team which of cours...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Ridiculous horror film about a wealthy man (Jo...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Well, if you are one of those Katana's film-nu...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                              review  sentiment\n",
       "0  With No Dead Heroes you get stupid lines like ...          0\n",
       "1  I thought maybe... maybe this could be good. A...          0\n",
       "2  An elite American military team which of cours...          0\n",
       "3  Ridiculous horror film about a wealthy man (Jo...          0\n",
       "4  Well, if you are one of those Katana's film-nu...          1"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Loading the data into a DataFrame\n",
    "movieReview = pd.read_csv('IMDB Dataset.csv')\n",
    "\n",
    "# Converting the \"sentiment\" column to 0 and 1\n",
    "movieReview['sentiment'] = (movieReview['sentiment'] == 'positive').astype(int)\n",
    "\n",
    "# Renaming the columns so it works for the model.\n",
    "movieReview = movieReview.rename(columns={'sentiment': 'sentiment', 'review': 'review'})\n",
    "\n",
    "# To help with processing time taking a subset of the data.\n",
    "movieReview = movieReview.sample(n=25000, random_state=1)\n",
    "movieReview = movieReview.reset_index(drop=True)\n",
    "\n",
    "movieReview.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e865f7fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8882\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Convertin the \"review\" column to lowercase\n",
    "movieReview['review'] = movieReview['review'].str.lower()\n",
    "\n",
    "# Removin punctuation and special characters from the \"review\" column\n",
    "movieReview['review'] = movieReview['review'].apply(lambda x: re.sub(r'[^\\w\\s]', '', x))\n",
    "\n",
    "# Removin stop words from the \"review\" column\n",
    "stop_words = stopwords.words('english')\n",
    "movieReview['review'] = movieReview['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n",
    "\n",
    "# Applying the PorterStemmer to the \"review\" column\n",
    "porter = PorterStemmer()\n",
    "movieReview['review'] = movieReview['review'].apply(lambda x: ' '.join([porter.stem(word) for word in x.split()]))\n",
    "\n",
    "# Splitting the data into training and test sets\n",
    "train_size = int(len(movieReview) * 0.8)\n",
    "train_data = movieReview[:train_size]\n",
    "test_data = movieReview[train_size:]\n",
    "\n",
    "# Fit and apply the tf-idf vectorization to the training set\n",
    "tfidf_vectorizer = TfidfVectorizer()\n",
    "X_train_tfidf = tfidf_vectorizer.fit_transform(train_data['review'].tolist())\n",
    "\n",
    "# Applying but DO NOT FIT the tf-idf vectorization to the test set\n",
    "X_test_tfidf = tfidf_vectorizer.transform(test_data['review'].tolist())\n",
    "\n",
    "# Extracting the labels for the training and test sets\n",
    "y_train = np.array(train_data['sentiment'])\n",
    "y_test = np.array(test_data['sentiment'])\n",
    "\n",
    "# Train the logistic regression model on the training set\n",
    "lr_model = LogisticRegression(max_iter=1000)\n",
    "lr_model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred = lr_model.predict(X_test_tfidf)\n",
    "\n",
    "# Calculate the accuracy of the model\n",
    "accuracy = np.mean(y_pred == y_test)\n",
    "print(f'Accuracy: {accuracy}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51bdcd6a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2261,  307],\n",
       "       [ 252, 2180]], dtype=int64)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "y_pred = lr_model.predict(X_test_tfidf)\n",
    "confusion_matrix(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ec5f8a3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "\n",
    "# Get predicted probabilities for the test set\n",
    "y_pred_proba = lr_model.predict_proba(X_test_tfidf)[:, 1]\n",
    "\n",
    "# Compute ROC curve and AUC\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_pred_proba)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# Plot the ROC curve\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "lw = 2\n",
    "plt.plot(fpr, tpr, color='darkred', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='green', lw=lw, linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC)')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
